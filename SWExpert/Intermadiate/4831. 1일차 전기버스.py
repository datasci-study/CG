'''
A도시는 전기버스를 운행하려고 한다. 전기버스는 한번 충전으로 이동할 수 있는 정류장 수가 정해져 있어서, 중간에 충전기가 설치된 정류장을 만들기로 했다.

버스는 0번에서 출발해 종점인 N번 정류장까지 이동하고, 한번 충전으로 최대한 이동할 수 있는 정류장 수 K가 정해져 있다.

충전기가 설치된 M개의 정류장 번호가 주어질 때, 최소한 몇 번의 충전을 해야 종점에 도착할 수 있는지 출력하는 프로그램을 만드시오.

만약 충전기 설치가 잘못되어 종점에 도착할 수 없는 경우는 0을 출력한다. 출발지에는 항상 충전기가 설치되어 있지만 충전횟수에는 포함하지 않는다.

[입력]
첫 줄에 노선 수 T가 주어진다.  ( 1 ≤ T ≤ 50 )
각 노선별로 K, N, M이 주어지고, 다음줄에 M개의 정류장 번호가 주어진다. ( 1 ≤ K, N, M ≤ 100 )
 
[출력]
#과 노선번호, 빈칸에 이어 최소 충전횟수 또는 0을 출력한다.

[입력 예]
3
3 10 5
1 3 5 7 9
3 10 5
1 3 7 8 9
5 20 5
4 7 9 14 17	 


[출력 예]
#1 3
#2 0
#3 4	 

'''
T = int(input()) # Test Case를 받을 변수

if 1<= T <=50: # T의 범위
    charging = [0]*T # 각 Test에 대해 충전 횟수를 반환 받기위한 변수 선언

    for j in range(0, T): # T회 반복
        K, N, M = map(int, input().split())
        # K : 풀충 최대 이동 거리
        # N : 종점
        # M : 충전소가 설치된 정류장의 번호

        if (1<= K <=100) and (1<= N <=100) and (1<= M <=100): # K, N, M의 조건
            a = list(map(int, input().split())) # M개의 충전소 위치를 받음

            if len(a) == M: # a의 갯수와 M이 같아야 함
                current = 0 # 현재 위치
                Q = 0 # 끝내도 되는지 여부를 결정하기 위해 선언

                while Q == 0: 
                    current_L1 = current #L1은 직전위치, 현위지와 직전 위치가 같다면 충전하여 전진하지 못함을 나타냄

                    for i in range(0, K): # 최대 K까지 이동가능함
                        if current + K - i in a: # 현 위치에서 최대 이동거리 안에 충전소가 있는 지 수색하고 발견하는 즉시 for문 탈출
                            current += K-i # 현 위치는 도달할 수 있는 가장 먼 충전소의 위치
                            charging[j] += 1 # 충전횟수 1 증가
                            break

                    if current_L1 == current: #L1은 직전위치, 현위지와 직전 위치가 같다면 충전하여 전진하지 못함을 나타냄
                        Q = 1 # 더 이상 반복할 필요 없음. 충전실패 했기에 while문 종료

                    if current + K >= N: # 더 이상의 충전 없이 무사히 종점을 지나게 되면
                        current = N # 현위치는 종점
                        Q = 1 # while 문 종료
                if current != N: # 현 위치가 종점이 아니면
                    charging[j] = 0 # 충전 횟수 0 반환

# 요구 양식에 맞게 출력
for i in range(0, T):
    print("#{0} {1}".format(i+1, charging[i]))
